# Generated by Django 3.0 on 2023-09-02 14:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Advice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('image', models.ImageField(upload_to='advice/')),
                ('type', models.CharField(choices=[('Consigli', 'Consigli'), ('Sostituzioni', 'Sostituzioni')], default='advice', max_length=256)),
                ('is_active', models.BooleanField(default=True)),
                ('expire_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Diet',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('day_of_week', models.CharField(choices=[('lun', 'Lunedì'), ('mar', 'Martedì'), ('mer', 'Mercoledì'), ('gio', 'Giovedì'), ('ven', 'Venerdì'), ('sab', 'Sabato'), ('dom', 'Domenica'), ('ven', 'Lunedì-Venerdì'), ('all', 'Tutti i giorni')], default='Lunedì', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Nome del cibo', max_length=255, null=True)),
                ('category', models.CharField(choices=[('carni_fresche', 'Carni Fresche'), ('verdure_e_ortaggi', 'Verdure e Ortaggi'), ('frutta', 'Frutta'), ('legumi', 'Legumi'), ('cereali_e_derivati', 'Cereali e Derivati'), ('carni_trasformate_e_conservate', 'Carni Trasformate e Conservate'), ('fast_food_a_base_di_carne', 'Fast-Food a base di carne'), ('frattaglie', 'Frattaglie'), ('prodotti_della_pesca', 'Prodotti della Pesca'), ('latte_e_yogurt', 'Latte e Yogurt'), ('formaggi_e_latticini', 'Formaggi e Latticini'), ('olii_e_grassi', 'Olii e Grassi'), ('uova', 'Uova'), ('prodotti_vari', 'Prodotti Vari'), ('dolci', 'Dolci'), ('bevande_alcooliche', 'Bevande Alcooliche')], default='', help_text='Categoria del cibo', max_length=255)),
                ('kcal', models.DecimalField(decimal_places=4, default=0, help_text='Valore calorico (kcal)', max_digits=16)),
                ('kj', models.DecimalField(decimal_places=4, default=0, help_text='Valore energetico (kJ)', max_digits=16)),
                ('carbohydrates', models.DecimalField(decimal_places=4, default=0, help_text='Carboidrati disponibili (g)', max_digits=16)),
                ('fats', models.DecimalField(decimal_places=4, default=0, help_text='Grassi (g)', max_digits=16)),
                ('proteins', models.DecimalField(decimal_places=4, default=0, help_text='Proteine (g)', max_digits=16)),
                ('chemical_composition', models.TextField(blank=True, default='', help_text='Composizione chimica', null=True)),
                ('edible_part', models.CharField(blank=True, default='', help_text='Parte edibile (%)', max_length=255, null=True)),
                ('water', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Contenuto di acqua (g)', max_digits=16, null=True)),
                ('complex_carbohydrates', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Carboidrati complessi (g)', max_digits=16, null=True)),
                ('soluble_sugars', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Zuccheri solubili (g)', max_digits=16, null=True)),
                ('total_saturated_fats', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Saturi totali (g)', max_digits=16, null=True)),
                ('total_monounsaturated_fats', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Monoinsaturi totali (g)', max_digits=16, null=True)),
                ('total_polyunsaturated_fats', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Polinsaturi totali (g)', max_digits=16, null=True)),
                ('cholesterol', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Colesterolo (mg)', max_digits=16, null=True)),
                ('total_fiber', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Fibra totale (g)', max_digits=16, null=True)),
                ('soluble_fiber', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Fibra solubile (g)', max_digits=16, null=True)),
                ('insoluble_fiber', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Fibra insolubile (g)', max_digits=16, null=True)),
                ('alcohol', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Alcol (g)', max_digits=16, null=True)),
                ('sodium', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Sodio (mg)', max_digits=16, null=True)),
                ('potassium', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Potassio (mg)', max_digits=16, null=True)),
                ('iron', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Ferro (mg)', max_digits=16, null=True)),
                ('calcium', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Calcio (mg)', max_digits=16, null=True)),
                ('phosphorus', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Fosforo (mg)', max_digits=16, null=True)),
                ('magnesium', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Magnesio (mg)', max_digits=16, null=True)),
                ('zinc', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Zinco (mg)', max_digits=16, null=True)),
                ('copper', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Rame (mg)', max_digits=16, null=True)),
                ('selenium', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Selenio (µg)', max_digits=16, null=True)),
                ('thiamine_vitamin_b1', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Tiamina (Vit. B1) (mg)', max_digits=16, null=True)),
                ('riboflavin_vitamin_b2', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Riboflavina (Vit. B2) (mg)', max_digits=16, null=True)),
                ('niacin_vitamin_b3', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Niacina (Vit. B3 o PP) (mg)', max_digits=16, null=True)),
                ('vitamin_a_retinol_eq', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Vitamina A retinolo eq. (µg)', max_digits=16, null=True)),
                ('vitamin_c', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Vitamina C (mg)', max_digits=16, null=True)),
                ('vitamin_e', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Vitamina E (mg)', max_digits=16, null=True)),
                ('vitamin_b6', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Vitamina B6 (mg)', max_digits=16, null=True)),
                ('vitamin_b12', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Vitamina B12 (mg)', max_digits=16, null=True)),
                ('manganese', models.DecimalField(blank=True, decimal_places=4, default=0, help_text='Manganese (mg)', max_digits=16, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('surname', models.CharField(blank=True, max_length=256, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WeightMeasure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.DecimalField(decimal_places=4, max_digits=7)),
                ('entry_date', models.DateField(blank=True, null=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Patient')),
            ],
            options={
                'verbose_name': 'Weight',
                'verbose_name_plural': 'Weight',
            },
        ),
        migrations.CreateModel(
            name='Portion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=256, null=True)),
                ('quantity', models.DecimalField(decimal_places=4, default=0, max_digits=7)),
                ('unity', models.CharField(blank=True, choices=[('g', 'g'), ('ml', 'ml')], default='g', max_length=255, null=True)),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Food')),
            ],
        ),
        migrations.CreateModel(
            name='PatientProgram',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=False)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('dieta', models.ManyToManyField(to='core.Diet')),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.Patient')),
            ],
        ),
        migrations.CreateModel(
            name='Meal',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(choices=[('Colazione', 'breakfast'), ('Pranzo', 'launch'), ('Cena', 'dinner'), ('Merenda', 'snack')], default='colazione', max_length=256)),
                ('portions', models.ManyToManyField(to='core.Portion')),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='images/')),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='get_images', to='core.Food')),
            ],
        ),
        migrations.CreateModel(
            name='FoodSubstitute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('substitute_quantity', models.DecimalField(decimal_places=4, default=100.0, max_digits=7)),
                ('food_substitute', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='food_substitute', to='core.Food')),
                ('food_to_substitute', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='food_to_substitute', to='core.Food')),
            ],
            options={
                'verbose_name': 'Food Substitute',
                'verbose_name_plural': 'Food Substitute',
            },
        ),
        migrations.CreateModel(
            name='FoodLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food_consumed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Food')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Patient')),
            ],
            options={
                'verbose_name': 'Food Log',
                'verbose_name_plural': 'Food Log',
            },
        ),
        migrations.AddField(
            model_name='diet',
            name='meals',
            field=models.ManyToManyField(to='core.Meal'),
        ),
        migrations.AddField(
            model_name='diet',
            name='patient',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Patient'),
        ),
    ]
